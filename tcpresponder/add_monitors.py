#!/usr/bin/env python3
import pandas as pd
from uptime_kuma_api import UptimeKumaApi,MonitorType
from ninjapy.client import NinjaRMMClient
import os
from dotenv import load_dotenv
import json
from collections import defaultdict

# Load environment variables FIRST, before accessing any
load_dotenv()

# Now access environment variables
NINJA_CLIENT_ID = os.getenv("NINJA_CLIENT_ID")
NINJA_CLIENT_SECRET = os.getenv("NINJA_CLIENT_SECRET")
NINJA_TOKEN_URL = os.getenv("NINJA_TOKEN_URL")
NINJA_SCOPE = os.getenv("NINJA_SCOPE")
NINJA_API_BASE_URL = os.getenv("NINJA_API_BASE_URL")
UPTIME_KUMA_API_URL = os.getenv("UPTIME_KUMA_API_URL")
UPTIME_KUMA_USERNAME = os.getenv("UPTIME_KUMA_USERNAME")
UPTIME_KUMA_PASSWORD = os.getenv("UPTIME_KUMA_PASSWORD")

ninja = NinjaRMMClient(
    client_id=NINJA_CLIENT_ID,
    client_secret=NINJA_CLIENT_SECRET,
    token_url=NINJA_TOKEN_URL,
    scope=NINJA_SCOPE
)


def add_kuma_monitors(ninja_orgs_dict):
    """
    Transform data from ninja_orgs_dict to kuma_monitors structure.
    
    ninja_orgs_dict structure:
    - name: Organization name
    - locations.name: Location name
    
    kuma_monitors structure:
    - id: Auto-generated by API
    - name: Organization name or Location name
    - parent: Parent organization ID (for locations only)
    """
    # No need to call load_dotenv() again here
    
    # Initialize API
    api = UptimeKumaApi(UPTIME_KUMA_API_URL)
    api.login(UPTIME_KUMA_USERNAME,UPTIME_KUMA_PASSWORD)
    
    try:
        # Get existing monitors to avoid duplicates
        existing_monitors = api.get_monitors()
        existing_orgs = {monitor['name']: monitor['id'] for monitor in existing_monitors 
                         if monitor.get('parent') is None}  # Only top-level monitors (organizations)
        
        # Group locations by organization
        org_locations = defaultdict(list)
        for item in ninja_orgs_dict:
            org_name = item['name']
            location_name = item['locations.name']
            org_locations[org_name].append(location_name)
        
        # Dictionary to store organization IDs
        org_ids = {}
        
        # Add organizations and their locations
        for org_name, locations in org_locations.items():
            # Check if organization already exists
            if org_name in existing_orgs:
                org_id = existing_orgs[org_name]
                print(f"Organization {org_name} already exists with ID: {org_id}")
            else:

                response = api.add_monitor(name=org_name,type=MonitorType.GROUP)
                org_id = response['monitorID']
                print(f"Added organization {org_name} with ID: {org_id}")
            
            # Store organization ID for reference
            org_ids[org_name] = org_id
            
            # Get existing locations for this organization
            existing_locations = {m['name']: m['id'] for m in existing_monitors 
                                 if m.get('parent') == org_id}
            
            # Add locations for this organization
            for location_name in locations:
                # Check if location already exists under this organization
                if location_name in existing_locations:
                    loc_id = existing_locations[location_name]
                    print(f"Location {location_name} already exists for {org_name} with ID: {loc_id}")
                else:
                    # Add location with parent reference to organization

                    response = api.add_monitor(name=location_name,type=MonitorType.GROUP,parent=org_id)
                    loc_id = response['monitorID']
                    print(f"Added location {location_name} for {org_name} with ID: {loc_id}, parent: {org_id}")
        
        print("Monitors setup completed successfully!")
        return True
    
    except Exception as e:
        print(f"Error setting up monitors: {str(e)}")
        return False
    finally:
        # Logout from API
        api.disconnect()




def main():
    # Example usage
    # Replace with actual data loading or API call to get ninja_orgs_dict
    ninja_orgs = ninja.get_organizations_detailed()
    # Drop specified columns from ninja_orgs
    for org in ninja_orgs:
        if 'settings' in org:
            org.pop('settings', None)
        if 'policies' in org:
            org.pop('policies', None)
        if 'description' in org:
            org.pop('description', None)
        if 'nodeApprovalMode' in org:
            org.pop('nodeApprovalMode', None)

    ninja_orgs_df = pd.json_normalize(ninja_orgs)
    ninja_orgs_exploded = ninja_orgs_df.explode('locations')
    ninja_dict = ninja_orgs_exploded.to_dict(orient='records')
    ninja_orgs_normalized= pd.json_normalize(ninja_dict)
    ninja_orgs_dict = ninja_orgs_normalized.to_dict(orient='records')


    
    # Add monitors based on ninja_orgs_dict
    add_kuma_monitors(ninja_orgs_dict)

if __name__ == "__main__":
    main()
